'use strict'

angular.module('ccApp.services')
  .service 'questions', (_, Question) ->
    data = [{"tags":["User / Reviewer Experience"],"body":"Is there a runner script?","answerOptions":{"no":0.0,"yes":1.0},"notes":""},{"tags":["User / Reviewer Experience"],"body":"Is there a read me and does it explain how to run the app?","answerOptions":{"does not":0.0,"poorly":0.5,"well":1.0},"notes":""},{"tags":["User / Reviewer Experience"],"body":"Is there a catch all errors clause handling unexpected errors?","answerOptions":{"no":0.0,"yes":1.0},"notes":""},{"tags":["User / Reviewer Experience"],"body":"Do invalid inputs result in helpful error messages?","answerOptions":{"stacktrace":0.0,"unhelpful message":0.5,"helpful message":1.0},"notes":""},{"tags":["User / Reviewer Experience"],"body":"On scale from redundant to helpful, how are the comments?","answerOptions":{"redundant":0.0,"helpful":1.0},"notes":"redundant - state what the code does; helpful - explain reasons behind design decisions"},{"tags":["OOD"],"body":"Does the code follow Single Responsibility Principle?","answerOptions":{"rarely":0.0,"occasionally":0.5,"most times":1.0},"notes":""},{"tags":["OOD"],"body":"Are classes & methods small?","answerOptions":{"no":0.0,"yes":1.0},"notes":""},{"tags":["OOD"],"body":"Are variable / method names descriptive?","answerOptions":{"rarely":0.0,"occasionally":0.5,"most times":1.0},"notes":""},{"tags":["OOD"],"body":"Are methods easy to understand?\t","answerOptions":{"rarely":0.0,"occasionally":0.5,"most times":1.0},"notes":""},{"tags":["OOD"],"body":"Is the domain design helpful to describing the solution?","answerOptions":{"rarely":0.0,"occasionally":0.5,"most times":1.0},"notes":""},{"tags":["Testing"],"body":"Is there a separation between Functional / Integration / Unit test levels?","answerOptions":{"no":0.0,"yes":1.0},"notes":""},{"tags":["Testing"],"body":"Do unit tests describe behaviour of each public method?","answerOptions":{"rarely":0.0,"occasionally":0.5,"most times":1.0},"notes":""},{"tags":["Testing"],"body":"Do unit tests cover exceptional cases?","answerOptions":{"rarely":0.0,"occasionally":0.5,"most times":1.0},"notes":""},{"tags":["Testing"],"body":"Does test naming follow: action - context pattern?","answerOptions":{"rarely":0.0,"occasionally":0.5,"most times":1.0},"notes":""},{"tags":["Testing"],"body":"Do tests follow arrange-act-assert pattern?","answerOptions":{"rarely":0.0,"occasionally":0.5,"most times":1.0},"notes":""},{"tags":["Tech","Ruby"],"body":"Has a code quality checker / test coverage tool been used?","answerOptions":{"neither":0.0,"one of the two":0.25,"both":0.5},"notes":"\tFor example Cane, or Stylecop"},{"tags":["Tech","Ruby"],"body":"Do tests appropriately use describe and context blocks?","answerOptions":{"no":0.0,"sometimes":0.25,"most times":0.5},"notes":"Appropriately meaning in line with betterspecs.org guidelines"},{"tags":["Tech","Ruby"],"body":"Does the code include appropriate use of list / map operations?","answerOptions":{"rarely":0.0,"occasionally":0.25,"most times":0.5},"notes":""},{"tags":["Tech","Ruby"],"body":"Is Rakefile provided with relevant tasks & descriptions?","answerOptions":{"missing":0.0,"present, but messy":0.25,"well structured":0.5},"notes":""},{"tags":["Tech","Ruby"],"body":"Is Gemfile provided with relevant gem groupings","answerOptions":{"missing":0.0,"present":0.5},"notes":""},{"tags":["Tech","Git"],"body":"Are changes grouped in small cohesive commits?","answerOptions":{"no":0.0,"yes":0.5},"notes":""},{"tags":["Tech","Git"],"body":"Are commit messages meaningful, do they communicate reasons for changes?","answerOptions":{"no":0.0,"yes":0.5},"notes":""},{"tags":["Tech","Git"],"body":"Is there a meaningul gitignore?","answerOptions":{"no":0.0,"yes":0.5,"not relevant":0.5},"notes":""},{"tags":["Tech","Linux"],"body":"Is the runner written as a shell script (starting with a hashbang)?","answerOptions":{"no":0.0,"yes":0.5},"notes":""},{"tags":["Tech","Linux"],"body":"Are relevant signals trapped (SIGINT, EXIT)?","answerOptions":{"no":0.0,"yes":0.5},"notes":""}]
    _.map(data, (item) -> new Question(item))

